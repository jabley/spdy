package spdy

import "fmt"

const (
	NextProtoTLS = "spdy/2"

	initialHeaderTableSize = 4096
)

// Maximum frame size (2 ** 24 -1).
const MAX_FRAME_SIZE = 0xffffff

const MAX_DATA_SIZE = 0xffffff

// Maximum stream ID (2 ** 31 -1).
const MAX_STREAM_ID = 0x7fffffff

// Maximum number of bytes in the transfer window.
const MAX_TRANSFER_WINDOW_SIZE = 0x80000000

// The default initial transfer window size, as defined in the spec.
const DEFAULT_INITIAL_WINDOW_SIZE = 65535

// The default initial transfer window sent by the client.
const DEFAULT_INITIAL_CLIENT_WINDOW_SIZE = 10485760

// Maximum delta window size field for WINDOW_UPDATE.
const MAX_DELTA_WINDOW_SIZE = 0x7fffffff

// The default maximum number of concurrent streams.
const DEFAULT_STREAM_LIMIT = 1000

// Compression header for SPDY/2
var HeaderDictionary = []byte{
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x67,
	0x65, 0x74, 0x68, 0x65, 0x61, 0x64, 0x70, 0x6f,
	0x73, 0x74, 0x70, 0x75, 0x74, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x2d, 0x63, 0x68, 0x61,
	0x72, 0x73, 0x65, 0x74, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x2d, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x2d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x66, 0x72, 0x6f,
	0x6d, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x2d,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x2d, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x69, 0x66,
	0x2d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x66,
	0x2d, 0x6e, 0x6f, 0x6e, 0x65, 0x2d, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x66, 0x2d, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x69, 0x66, 0x2d, 0x75, 0x6e,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x73, 0x69, 0x6e, 0x63, 0x65, 0x6d, 0x61, 0x78,
	0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72,
	0x74, 0x65, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x31, 0x30, 0x30, 0x31,
	0x30, 0x31, 0x32, 0x30, 0x30, 0x32, 0x30, 0x31,
	0x32, 0x30, 0x32, 0x32, 0x30, 0x33, 0x32, 0x30,
	0x34, 0x32, 0x30, 0x35, 0x32, 0x30, 0x36, 0x33,
	0x30, 0x30, 0x33, 0x30, 0x31, 0x33, 0x30, 0x32,
	0x33, 0x30, 0x33, 0x33, 0x30, 0x34, 0x33, 0x30,
	0x35, 0x33, 0x30, 0x36, 0x33, 0x30, 0x37, 0x34,
	0x30, 0x30, 0x34, 0x30, 0x31, 0x34, 0x30, 0x32,
	0x34, 0x30, 0x33, 0x34, 0x30, 0x34, 0x34, 0x30,
	0x35, 0x34, 0x30, 0x36, 0x34, 0x30, 0x37, 0x34,
	0x30, 0x38, 0x34, 0x30, 0x39, 0x34, 0x31, 0x30,
	0x34, 0x31, 0x31, 0x34, 0x31, 0x32, 0x34, 0x31,
	0x33, 0x34, 0x31, 0x34, 0x34, 0x31, 0x35, 0x34,
	0x31, 0x36, 0x34, 0x31, 0x37, 0x35, 0x30, 0x30,
	0x35, 0x30, 0x31, 0x35, 0x30, 0x32, 0x35, 0x30,
	0x33, 0x35, 0x30, 0x34, 0x35, 0x30, 0x35, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x61, 0x67, 0x65, 0x65,
	0x74, 0x61, 0x67, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x2d, 0x61, 0x66, 0x74, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x76, 0x61, 0x72, 0x79,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x77,
	0x77, 0x77, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2d, 0x62, 0x61, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x2d, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x72, 0x61, 0x69, 0x6c,
	0x65, 0x72, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2d, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x76, 0x69, 0x61, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2d, 0x6d, 0x64, 0x35, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x65, 0x74,
	0x61, 0x67, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x73, 0x65,
	0x74, 0x2d, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x4d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x54, 0x75,
	0x65, 0x73, 0x64, 0x61, 0x79, 0x57, 0x65, 0x64,
	0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x54, 0x68,
	0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x46, 0x72,
	0x69, 0x64, 0x61, 0x79, 0x53, 0x61, 0x74, 0x75,
	0x72, 0x64, 0x61, 0x79, 0x53, 0x75, 0x6e, 0x64,
	0x61, 0x79, 0x4a, 0x61, 0x6e, 0x46, 0x65, 0x62,
	0x4d, 0x61, 0x72, 0x41, 0x70, 0x72, 0x4d, 0x61,
	0x79, 0x4a, 0x75, 0x6e, 0x4a, 0x75, 0x6c, 0x41,
	0x75, 0x67, 0x53, 0x65, 0x70, 0x4f, 0x63, 0x74,
	0x4e, 0x6f, 0x76, 0x44, 0x65, 0x63, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x65, 0x64, 0x74, 0x65, 0x78,
	0x74, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x2f, 0x70, 0x6e, 0x67, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x2f, 0x6a, 0x70, 0x67,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x67, 0x69,
	0x66, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x78, 0x6d, 0x6c,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x78, 0x68, 0x74, 0x6d,
	0x6c, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x6d, 0x61, 0x78, 0x2d, 0x61, 0x67, 0x65,
	0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d,
	0x69, 0x73, 0x6f, 0x2d, 0x38, 0x38, 0x35, 0x39,
	0x2d, 0x31, 0x75, 0x74, 0x66, 0x2d, 0x38, 0x67,
	0x7a, 0x69, 0x70, 0x64, 0x65, 0x66, 0x6c, 0x61,
	0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x2f, 0x31,
	0x2e, 0x31, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x75,
	0x72, 0x6c, 0x00,
}

// Setting is a setting parameter: which setting it is, and its value.
type Setting struct {
	// ID is which setting is being set.
	// See http://http2.github.io/http2-spec/#SettingValues
	ID    SettingID
	Flags Flags
	// Val is the value.
	Val uint32
}

func (s Setting) String() string {
	return fmt.Sprintf("[%v = %d,%v]", s.ID, s.Val, s.Flags)
}

// Valid reports whether the setting is valid.
func (s Setting) Valid() error {
	// Limits and error codes from 6.5.2 Defined SETTINGS Parameters
	switch s.ID {
	// case SettingEnablePush:
	// 	if s.Val != 1 && s.Val != 0 {
	// 		return ConnectionError(ErrCodeProtocol)
	// 	}
	case SettingInitialWindowSize:
		if s.Val > 1<<31-1 {
			return ConnectionError(ErrCodeFlowControl)
		}
		// case SettingMaxFrameSize:
		// 	if s.Val < 16384 || s.Val > 1<<24-1 {
		// 		return ConnectionError(ErrCodeProtocol)
		// 	}
	}
	return nil
}

// A SettingID is a SPDY setting as defined in
// http://www.chromium.org/spdy/spdy-protocol/spdy-protocol-draft2#TOC-SETTINGS
type SettingID uint32

const (
	SettingUploadBandwidth      SettingID = 0x1
	SettingDownloadBandwith     SettingID = 0x2
	SettingRoundTripTime        SettingID = 0x3
	SettingMaxConcurrentStreams SettingID = 0x4
	SettingCurrentCWND          SettingID = 0x5
	SettingDownloadRetransRate  SettingID = 0x6
	SettingInitialWindowSize    SettingID = 0x7
)

var settingName = map[SettingID]string{
	SettingUploadBandwidth:      "UPLOAD_BANDWIDTH",
	SettingDownloadBandwith:     "DOWNLOAD_BANDWIDTH",
	SettingRoundTripTime:        "ROUND_TRIP_TIME",
	SettingMaxConcurrentStreams: "MAX_CONCURRENT_STREAMS",
	SettingCurrentCWND:          "CURRENT_CWND",
	SettingDownloadRetransRate:  "DOWNLOAD_RETRANS_RATE",
	SettingInitialWindowSize:    "INITIAL_WINDOW_SIZE",
}

func (s SettingID) String() string {
	if v, ok := settingName[s]; ok {
		return v
	}
	return fmt.Sprintf("UNKNOWN_SETTING_%d", uint16(s))
}
